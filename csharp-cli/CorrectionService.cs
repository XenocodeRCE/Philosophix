using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class CorrectionService
{
    private readonly OpenAiService _openAiService;
    private readonly JsonDatabaseService _dbService;

    /// <summary>
    /// Obtient le niveau de s√©v√©rit√© selon le type de bac
    /// </summary>
    private string GetSeverite(string typeBac)
    {
        return typeBac switch
    {
        "technologique" => @"INSTRUCTIONS DE NOTATION pour BAC TECHNOLOGIQUE :
- Cette copie doit √™tre √©valu√©e selon les standards r√©els du bac technologique
- Ne donnez PAS la m√™me note √† toutes les comp√©tences
- Soyez diff√©renci√© : certaines comp√©tences peuvent avoir 8-9/20, d'autres 11-13/20
- N'h√©sitez pas √† donner des notes en dessous de 10/20 si la comp√©tence est insuffisante
- Basez-vous sur l'√©chelle : 6-9 = insuffisant, 10-11 = correct, 12-14 = bien, 15+ = tr√®s bien",
        
        "g√©n√©ral" => "Degr√© de s√©v√©rit√© : 3 / 5",
        _ => "Degr√© de s√©v√©rit√© : 3 / 5"
    };
    }

    public CorrectionService(OpenAiService openAiService, JsonDatabaseService dbService)
    {
        _openAiService = openAiService;
        _dbService = dbService;
    }    /// <summary>
    /// Lance le processus complet de correction d'une copie
    /// </summary>
    public async Task<Correction> CorrigerCopieAsync(Devoir devoir, string copie, bool aPAP = false)
    {
        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("ü§ñ CORRECTION EN COURS...");
        Console.WriteLine(new string('‚ïê', 60));

        var competences = devoir.Bareme?.Competences ?? new List<Competence>();
          // Filtrer les comp√©tences si PAP (exclure la comp√©tence "Ma√Ætrise de la langue fran√ßaise" ou "Expression et r√©daction")
        if (aPAP)
        {
            Console.WriteLine("‚ÑπÔ∏è  PAP activ√© : Les comp√©tences d'expression ne seront pas √©valu√©es.");
            if (devoir.Type?.ToLower() == "explication")
            {
                // retirer la comp√©tence 6, Nom = "Expression et r√©daction"
                competences = competences.Where(c => c.Nom != "Expression et r√©daction").ToList();
            }
            else
            {
                // retirer la comp√©tence 5, Nom = "Ma√Ætrise de la langue fran√ßaise"
                competences = competences.Where(c => c.Nom != "Ma√Ætrise de la langue fran√ßaise").ToList();
            }
        }
        
        var evaluations = new List<EvaluationCompetence>();

        // √âvaluation par comp√©tence
        for (int i = 0; i < competences.Count; i++)
        {
            var competence = competences[i];
            Console.WriteLine($"\nüìã √âvaluation de la comp√©tence {i + 1}/{competences.Count}:");
            Console.WriteLine($"   {competence.Nom}");
            Console.Write("   Analyse en cours");
            var evaluation = await EvaluerCompetenceAsync(competence, copie, devoir.Enonce ?? "", devoir.Type ?? "dissertation", devoir.TypeBac ?? "g√©n√©ral", aPAP);

            evaluations.Add(evaluation);
            Console.WriteLine($" ‚úÖ Note: {evaluation.Note:F1}/20");
        }

        // √âvaluation finale
        Console.WriteLine("\nüéØ G√©n√©ration de l'√©valuation finale...");
        var evaluationFinale = await EvaluerFinalAsync(evaluations, competences, copie, devoir.Type ?? "dissertation", devoir.TypeBac ?? "g√©n√©ral", aPAP);

        // Afficher le r√©sum√© des co√ªts
        Console.WriteLine("\n" + new string('‚îÄ', 60));
        _openAiService.CostTracker.DisplayCostSummary();

        // Calcul de la note moyenne
        var notesAjustees = evaluations.Select(e => AjusterNoteSelonNiveau(Convert.ToDouble(e.Note), devoir.TypeBac ?? "g√©n√©ral")).ToList();
        

         // Calcul de la note moyenne avec pond√©ration intelligente
        var notesFinales = evaluations.Select(e => e.Note).ToList();
        var notesFinalesDouble = notesFinales.Select(n => Convert.ToDouble(n)).ToList();
        var noteMoyenne = AppliquerPonderation(notesFinalesDouble, devoir.TypeBac ?? "g√©n√©ral", evaluations);

        // Afficher les d√©tails pour le bac technologique
        if (devoir.TypeBac == "technologique")
        {
             var noteSansAjustement = evaluations.Average(e => e.Note);
            Console.WriteLine($"üìä Note moyenne des comp√©tences : {noteSansAjustement:F1}/20");
            Console.WriteLine($"üìä Note finale apr√®s pond√©ration bac techno : {noteMoyenne:F1}/20");
            
            // Debug : afficher quelques extraits d'analyse pour v√©rification
            Console.WriteLine("üîç Extraits d'analyses pour v√©rification :");
            foreach (var eval in evaluations.Take(2))
            {
                var extrait = eval.Analyse?.Substring(0, Math.Min(eval.Analyse.Length, 100)) ?? "";
                Console.WriteLine($"   ‚Ä¢ {eval.Nom}: {extrait}...");
            }
        }

        // Cr√©ation de la correction
        var corrections = await _dbService.LireCorrectionsAsync();
        var newId = corrections.Count > 0 ? corrections.Max(c => c.Id) + 1 : 1;

        var correction = new Correction
        {
            Id = newId,
            DevoirId = devoir.Id,
            Note = (decimal)noteMoyenne,
            Appreciation = evaluationFinale.Appreciation,
            PointsForts = evaluationFinale.PointsForts,
            PointsAmeliorer = evaluationFinale.PointsAmeliorer,
            Competences = evaluations,
            Copie = copie,
            DateCorrection = DateTime.Now
        };

        corrections.Add(correction);
        await _dbService.SauvegarderCorrectionsAsync(corrections);

        return correction;
    }    /// <summary>
    /// √âvalue une comp√©tence sp√©cifique
    /// </summary>
    private async Task<EvaluationCompetence> EvaluerCompetenceAsync(Competence competence, string copie, string enonce, string typeDevoir, string TypeBac, bool aPAP = false)    {
        var system = $@"Vous √™tes un correcteur de philosophie qui √©value selon les standards R√âELS du bac {TypeBac}.
        
        ATTENTION : Cette copie doit √™tre not√©e de mani√®re DIFF√âRENCI√âE et R√âALISTE.
- Ne donnez PAS la m√™me note √† toutes les comp√©tences
- Utilisez toute l'√©chelle de notation : 6-20/20";
        
        var messagePAP = aPAP ? "\n\nIMPORTANT : Cet √©l√®ve dispose d'un PAP (Plan d'Accompagnement Personnalis√©). Ne tenez pas compte de la qualit√© de l'orthographe, de la grammaire ou de l'expression √©crite dans votre √©valuation. Concentrez-vous uniquement sur le contenu philosophique et la r√©flexion." : "";
        
        // Adapter le message selon le type de bac
        string messageNiveau = "";
        if (TypeBac == "technologique")
        {
            messageNiveau = "\nüìä NIVEAU : Bac technologique - Adaptez vos attentes au niveau et soyez bienveillant sur les imperfections mineures de forme. Privil√©giez la compr√©hension et les id√©es.";
        }

var prompt = $@"√âvaluez la comp√©tence ""{competence.Nom}"" .

**COMP√âTENCE √Ä √âVALUER :** 
{competence.Nom}

**CRIT√àRES D'√âVALUATION :**
{string.Join("\n", competence.Criteres ?? new List<string>())}

**√âNONC√â DU DEVOIR :** 
{enonce}

**STYLE D'APPR√âCIATION :**
Formel, vouvoie l'apprenant.

**TYPE DE DEVOIR:**
{typeDevoir}{messagePAP}

**COPIE DE L'√âL√àVE :**
{copie}
{messagePAP}{messageNiveau}

R√©pondez UNIQUEMENT au format JSON suivant :
{{
    ""note"": <note sur 20>,
    ""analyse"": ""<analyse d√©taill√©e qui cite des √©l√©ments de la copie>"",
    ""points_forts"": [""point fort 1"", ""point fort 2"", ...],
    ""points_ameliorer"": [""point √† am√©liorer 1"", ""point √† am√©liorer 2"", ...]
}}

√âvaluez UNIQUEMENT cette comp√©tence, rien d'autre.
Pour l'analyse, cites des √©l√©ments de la copie pour justifier ta note, et addresses-toi √† l'√©l√®ve directement.

{GetSeverite(TypeBac)}";

        var response = await _openAiService.AskGptAsync(system, prompt, $"Comp√©tence: {competence.Nom}");
        var evaluation = _openAiService.ParseEvaluationResponse(response);
        
        // Ajouter le nom de la comp√©tence √† l'√©valuation
        evaluation.Nom = competence.Nom;
        
        return evaluation;
    }    /// <summary>
    /// G√©n√®re l'√©valuation finale globale
    /// </summary>
    private async Task<EvaluationFinaleApiResponse> EvaluerFinalAsync(List<EvaluationCompetence> evaluations, List<Competence> competences, string copie, string typeDevoir, string TypeBac, bool aPAP = false)    {
        var system = "Vous √™tes un professeur de philosophie exp√©riment√© qui corrige des r√©dactions.";
        
        var echelleNotation = GetEchelleNotation(typeDevoir);
        var messagePAP = aPAP ? "\n\nIMPORTANT : Cet √©l√®ve dispose d'un PAP (Plan d'Accompagnement Personnalis√©). Dans votre appr√©ciation g√©n√©rale, ne tenez pas compte de la qualit√© de l'orthographe, de la grammaire ou de l'expression √©crite. Concentrez-vous uniquement sur le contenu philosophique et la r√©flexion." : "";

        string messageNiveau = "";
        if (TypeBac == "technologique")
        {
            messageNiveau = "\nüìä NIVEAU : Bac technologique - Adaptez vos attentes au niveau et soyez bienveillant sur les imperfections mineures de forme. Privil√©giez la compr√©hension et les id√©es.";
        }

        
        var evaluationsText = string.Join("\n", evaluations.Zip(competences, (eval, comp) => 
            $"{comp.Nom}: {eval.Note}/20 - {eval.Analyse}"));

        var prompt = $@"Type de devoir : {typeDevoir}
En tant que professeur de philosophie, faites une √©valuation globale de cette copie.

Voici les √©valuations par comp√©tence :
{evaluationsText}

Copie de l'√©l√®ve :
{copie}

Style d'appr√©ciation : 
Formelle, vouvoie l'apprenant.

{messagePAP}

{messageNiveau}

{echelleNotation}

R√©pondez UNIQUEMENT au format JSON suivant :
{{
    ""appreciation"": ""<appr√©ciation g√©n√©rale d√©taill√©e>"",
    ""points_forts"": [""point fort 1"", ""point fort 2"", ""point fort 3""],
    ""points_ameliorer"": [""point 1"", ""point 2"", ""point 3""]
}}

Pour l'appreciation addresses-toi √† l'√©l√®ve directement.
{GetSeverite(TypeBac)}";

        var response = await _openAiService.AskGptAsync(system, prompt, "√âvaluation finale");
        return _openAiService.ParseEvaluationFinaleResponse(response);
    }

    /// <summary>
    /// Retourne l'√©chelle de notation selon le type de devoir
    /// </summary>
    private static string GetEchelleNotation(string typeDevoir)
    {
        if (typeDevoir?.ToLower() == "dissertation")
        {
            return @"√âchelle d'√©valuation pour guider la notation des copies :
""""""
- Ce qui est valoris√© : une probl√©matisation du sujet, une argumentation coh√©rente et progressive, l'analyse de concepts (notions, distinctions) et d'exemples pr√©cis√©ment √©tudi√©s, la mobilisation d'√©l√©ments de culture philosophique au service du traitement du sujet, la capacit√© de la r√©flexion √† entrer en dialogue avec elle-m√™me. 
- Ce qui est sanctionn√© : la paraphrase du texte, la r√©citation de cours sans lien avec le sujet, l'accumulation de lieux communs, la juxtaposition d'exemples sans r√©flexion, l'absence de probl√©matisation, l'absence de rigueur dans le raisonnement, l'absence de culture philosophique mobilis√©e pour traiter le sujet.

# √âchelle de notation :
- Entre 0 et 5 ‚Üí copie tr√®s insuffisante : inintelligible ; non structur√©e ; excessivement br√®ve ; marquant un refus manifeste de faire l'exercice.
- De 06 √† 09 ‚Üí Copie intelligible mais qui ne r√©pond pas aux crit√®res attest√©s de l'√©preuve : propos excessivement g√©n√©ral ou restant sans rapport avec la question pos√©e ; juxtaposition d'exemples sommaires ou anecdotiques ; accumulation de lieux communs ; paraphrase ou r√©p√©tition du texte ; r√©citation de cours sans traitement du sujet ;- copie qui aurait pu √™tre r√©dig√©e au d√©but de l'ann√©e, sans aucun cours de philosophie ou connaissances acquises.
- Pas moins de 10 ‚Üí Copie t√©moignant d'un r√©el effort de r√©flexion, et, m√™me si le r√©sultat n'est pas abouti, de traitement du sujet : effort de probl√©matisation ; effort de d√©finition des notions ; examen de r√©ponses possibles ; coh√©rence globale du propos.
- Pas moins de 12 ‚Üí Si, en plus, il y a mobilisation de r√©f√©rences et d'exemples pertinents pour le sujet.
- Pas moins de 14 ‚Üí Si, en plus, le raisonnement est construit, progressif, et que les affirmations pos√©es sont rigoureusement justifi√©es.
- Pas moins de 16 ‚Üí Si, en plus, la copie t√©moigne de la ma√Ætrise de concepts philosophiques utiles pour le sujet (notions, rep√®res), d'une d√©marche de recherche et du souci des enjeux de la question, d'une pr√©cision dans l'utilisation d'une culture au service du traitement du sujet. 
""""""";
        }
        else
        {
            return @"√âchelle d'√©valuation pour guider la notation des copies :
""""""
- Ce qui est valoris√© : une d√©termination du probl√®me du texte, une explication de ses √©l√©ments signifiants, une explicitation des articulations du texte, une caract√©risation  de la position philosophique √©labor√©e par  l'auteur dans le texte, et, plus g√©n√©ralement,  du questionnement auquel elle s'articule.
- Ce qui est sanctionn√© : la paraphrase du texte, la r√©citation de cours sans lien avec le texte de l'auteur, l'accumulation de lieux communs, la juxtaposition d'exemples sans r√©flexion, l'absence de probl√©matisation du texte, l'absence de rigueur dans le raisonnement, l'absence de culture philosophique mobilis√©e pour traiter le sujet.

# √âchelle de notation :
- Entre 0 et 5 ‚Üí copie tr√®s insuffisante : inintelligible ; non structur√©e ; excessivement br√®ve ; marquant un refus manifeste de faire l'exercice.
- De 06 √† 09 ‚Üí Copie intelligible mais qui ne r√©pond pas aux crit√®res attest√©s de l'√©preuve : propos excessivement g√©n√©ral ou restant sans rapport avec la question pos√©e ; juxtaposition d'exemples sommaires ou anecdotiques ; accumulation de lieux communs ; paraphrase ou r√©p√©tition du texte ; r√©citation de cours sans traitement du sujet ;- copie qui aurait pu √™tre r√©dig√©e au d√©but de l'ann√©e, sans aucun cours de philosophie ou connaissances acquises.
- Pas moins de 10 ‚Üí Copie faisant l'effort de r√©aliser l'exercice, m√™me si l'explication demeure maladroite et inaboutie : explication commen√ßante ; pas de contresens majeur sur le propos et la d√©marche de l'auteur.
- Pas moins de 12 ‚Üí Si, en plus, le texte est interrog√© avec un effort d'attention au d√©tail du propos, ainsi qu'√† sa structure logique.
- Pas moins de 14 ‚Üí Si, en plus, les √©l√©ments du texte sont mis en perspective, avec des √©l√©ments de connaissance permettant de d√©terminer et d'examiner le probl√®me.
- Pas moins de 16 ‚Üí Si, en plus, l'explication est d√©velopp√©e avec amplitude et justesse : l'ensemble du texte est examin√© et bien situ√© dans une probl√©matique  et un questionnement pertinents.
""""""";
        }
    }


    /// <summary>
    /// Ajuste les notes selon le niveau d'√©valuation pour plus de bienveillance
    /// </summary>
    private double AjusterNoteSelonNiveau(double note, string typeBac)
    {
        return typeBac switch
        {
            "technologique" => Math.Min(20, note + 0.5),
            "g√©n√©ral" => note,
            _ => note
        };
    }
    

    /// <summary>
    /// D√©tecte la qualit√© globale d'une copie bas√©e sur les √©valuations textuelles
    /// </summary>
    private string DetecterQualiteCopie(List<EvaluationCompetence> evaluations)
    {
        // Mots-cl√©s pour copie de BONNE qualit√©
        var motsClesBons = new[] { 
            "pertinente", "pertinent", "solide", "structur√©", "structur√©e", "claire", "clair", "clairement",
            "bon", "bonne", "r√©ussi", "efficace", "appropri√©", "appropri√©e", "coh√©rent", "coh√©rente",
            "int√©ressant", "int√©ressante", "satisfaisant", "satisfaisante", "correct", "correcte",
            "bien", "r√©f√©rences", "philosophiques", "vari√©es", "argumentatif", "argumentative",
            "logique", "fluide", "plan", "probl√©matique", "d√©velopp√©", "d√©velopp√©e", "richesse",
            "qualit√©", "ma√Ætrise", "r√©flexion", "construction", "organisation", "progression",
            "analyse", "synth√®se", "articulation", "engagement", "effort", "capacit√©", "enrichit",
            "enrichissant", "montre", "t√©moigne", "d√©montre", "r√©ussi √†", "parvenez", "identifi√©"
        };
        
        // Mots-cl√©s pour copie VRAIMENT faible (tr√®s restrictifs)
        var motsClesFaibles = new[] { 
            "tr√®s insuffisant", "insuffisant", "extr√™mement faible", "grave lacune",
            "incompr√©hensible", "incoh√©rent totalement", "absent totalement", "inexistant",
            "catastrophique", "d√©sorganis√© compl√®tement", "inintelligible", 
            "hors sujet", "sans rapport avec", "refuse de faire", "tr√®s faible"
        };

        // Mots-cl√©s d'am√©lioration (neutres - ne comptent ni pour ni contre)
        var motsClesAmeliorations = new[] {
            "am√©liorer", "clarifier", "pr√©ciser", "d√©velopper", "renforcer", "√©viter",
            "corriger", "veiller", "attention", "pourrait", "aurait pu", "gagnerait",
            "b√©n√©ficier", "manque", "manquer", "perfectible"
        };

        int scoreBon = 0;
        int scoreFaible = 0;
        int scoreAm√©liorations = 0;
        int totalMots = 0;

        foreach (var eval in evaluations)
        {
            var analyseTexte = eval.Analyse?.ToLower() ?? "";
            var pointsForts = string.Join(" ", eval.PointsForts?.Select(p => p.ToLower()) ?? new List<string>());
            var pointsAmeliorer = string.Join(" ", eval.PointsAmeliorer?.Select(p => p.ToLower()) ?? new List<string>());
            
            var texteComplet = $"{analyseTexte} {pointsForts}";
            var mots = texteComplet.Split(' ', StringSplitOptions.RemoveEmptyEntries);
            totalMots += mots.Length;
            
            // Compter les occurrences
            foreach (var mot in motsClesBons)
            {
                var matches = System.Text.RegularExpressions.Regex.Matches(texteComplet, $@"\b{mot}\b");
                scoreBon += matches.Count;
            }
            
            foreach (var mot in motsClesFaibles)
            {
                var matches = System.Text.RegularExpressions.Regex.Matches(texteComplet, $@"\b{mot}\b");
                scoreFaible += matches.Count;
            }

            foreach (var mot in motsClesAmeliorations)
            {
                var matches = System.Text.RegularExpressions.Regex.Matches(texteComplet, $@"\b{mot}\b");
                scoreAm√©liorations += matches.Count;
            }
        }

        // Calcul des densit√©s (pourcentages)
        var densiteBon = totalMots > 0 ? (double)scoreBon / totalMots * 100 : 0;
        var densiteFaible = totalMots > 0 ? (double)scoreFaible / totalMots * 100 : 0;
        var densiteAmeliorations = totalMots > 0 ? (double)scoreAm√©liorations / totalMots * 100 : 0;

        // Calcul des moyennes de notes pour validation crois√©e
        var moyenneNotes = evaluations.Average(e => e.Note);

        Console.WriteLine($"üîç Analyse qualit√© - Positif: {scoreBon}, N√©gatif: {scoreFaible}, Am√©liorations: {scoreAm√©liorations}");
        Console.WriteLine($"üîç Densit√©s - Positif: {densiteBon:F1}%, N√©gatif: {densiteFaible:F1}%, Am√©liorations: {densiteAmeliorations:F1}%");
        Console.WriteLine($"üîç Moyenne des notes: {moyenneNotes:F1}/20");

        // NOUVELLE LOGIQUE CORRIG√âE
        // Une copie est bonne si elle a beaucoup de points positifs ET peu de vrais d√©fauts
        // Une copie est faible si elle a beaucoup de vrais d√©fauts ET peu de points positifs
        
        if (moyenneNotes >= 13 && densiteBon >= 3.5 && densiteFaible <= 1.5)
        {
            return "bonne";
        }
        else if ((double)moyenneNotes >= 11.5 && densiteBon >= 2.5 && densiteFaible <= 2.0)
        {
            return "bonne";
        }
        else if (moyenneNotes < 9 && densiteFaible >= 2.0 && densiteBon <= 1.5)
        {
            return "faible";
        }
        else
        {
            return "moyenne";
        }
    }

    /// <summary>
    /// Applique une pond√©ration plus subtile selon le type de bac
    /// </summary>
    private double AppliquerPonderation(List<double> notes, string typeBac, List<EvaluationCompetence> evaluations)
    {
        var moyenne = notes.Average();
        var ecartType = CalculerEcartType(notes);
        var qualiteCopie = DetecterQualiteCopie(evaluations);
        
        Console.WriteLine($"üìä Qualit√© d√©tect√©e : {qualiteCopie}");
        Console.WriteLine($"üìä √âcart-type des notes : {ecartType:F2}");
        
        if (typeBac == "technologique")
        {
            switch (qualiteCopie)
            {
                case "bonne":
                    // Copie de bonne qualit√© : ajustement positif significatif
                    if (moyenne < 13)
                    {
                        moyenne = moyenne * 1.35; // +35% si sous-√©valu√©e
                        Console.WriteLine("‚úÖ Ajustement positif fort pour copie bonne qualit√© sous-√©valu√©e");
                    }
                    else if (moyenne < 15)
                    {
                        moyenne = moyenne * 1.20; // +20%
                        Console.WriteLine("‚úÖ Ajustement positif mod√©r√© pour copie bonne qualit√©");
                    }
                    else
                    {
                        moyenne = moyenne * 1.05; // +5% (d√©j√† bien not√©e)
                        Console.WriteLine("‚úÖ Ajustement positif l√©ger pour copie d√©j√† bien not√©e");
                    }
                    break;
                    
                case "faible":
                    // Copie vraiment faible : r√©duction
                    moyenne = moyenne * 0.80; // -20%
                    Console.WriteLine("üìâ Ajustement n√©gatif pour copie faible");
                    break;
                    
                default: // moyenne
                    // Copie moyenne : ajustement neutre
                    moyenne = moyenne * 1.02; // +2% (bienveillance bac techno)
                    Console.WriteLine("üîÑ Ajustement neutre bienveillant pour copie moyenne");
                    break;
            }
            
            // Contraintes finales
            moyenne = Math.Max(moyenne, 6.0);  // Minimum 6/20
            moyenne = Math.Min(moyenne, 18.5); // Maximum 18.5/20
            
            return Math.Round(moyenne, 1);
        }
        
        return Math.Round(moyenne, 1);

    }

    /// <summary>
    /// Calcule l'√©cart-type pour d√©tecter si les notes sont trop uniformes
    /// </summary>
    private double CalculerEcartType(List<double> notes)
    {
        if (notes.Count <= 1) return 0;
    
        var moyenne = notes.Average();
        var variance = notes.Sum(x => Math.Pow(x - moyenne, 2)) / notes.Count;
        return Math.Sqrt(variance);
    }

    /// <summary>
    /// Valide qu'une copie respecte les crit√®res minimums
    /// </summary>
    public static bool ValiderCopie(string copie, int longueurMinimum = 500)
    {
        return !string.IsNullOrWhiteSpace(copie) && copie.Length >= longueurMinimum;
    }

    /// <summary>
    /// Affiche les r√©sultats de correction de mani√®re format√©e
    /// </summary>
    public static void AfficherResultatsCorrection(Correction correction, List<Competence> competences)
    {
        //Console.Clear();
        Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        Console.WriteLine("‚ïë                R√âSULTATS DE CORRECTION               ‚ïë");
        Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        
        Console.WriteLine($"\nüéØ NOTE FINALE : {correction.Note:F1}/20");
        Console.WriteLine($"üìÖ Date de correction : {correction.DateCorrection:dd/MM/yyyy HH:mm}");
        
        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("üí¨ APPR√âCIATION G√âN√âRALE");
        Console.WriteLine(new string('‚ïê', 60));
        Console.WriteLine(correction.Appreciation);

        Console.WriteLine("\n" + new string('‚îÄ', 60));
        Console.WriteLine("‚úÖ POINTS FORTS");
        Console.WriteLine(new string('‚îÄ', 60));
        if (correction.PointsForts != null)
        {
            foreach (var point in correction.PointsForts)
            {
                Console.WriteLine($"‚Ä¢ {point}");
            }
        }

        Console.WriteLine("\n" + new string('‚îÄ', 60));
        Console.WriteLine("üìà POINTS √Ä AM√âLIORER");
        Console.WriteLine(new string('‚îÄ', 60));
        if (correction.PointsAmeliorer != null)
        {
            foreach (var point in correction.PointsAmeliorer)
            {
                Console.WriteLine($"‚Ä¢ {point}");
            }
        }

        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("üìä D√âTAIL PAR COMP√âTENCE");
        Console.WriteLine(new string('‚ïê', 60));
        
        if (correction.Competences != null)
        {
            for (int i = 0; i < correction.Competences.Count; i++)
            {
                var eval = correction.Competences[i];
                Console.WriteLine($"\n{i + 1}. {eval.Nom} - {eval.Note:F1}/20");
                Console.WriteLine($"   {eval.Analyse}");
                
                if (eval.PointsForts?.Count > 0)
                {
                    Console.WriteLine("   ‚úÖ Points forts :");
                    foreach (var point in eval.PointsForts)
                    {
                        Console.WriteLine($"      ‚Ä¢ {point}");
                    }
                }
                
                if (eval.PointsAmeliorer?.Count > 0)
                {
                    Console.WriteLine("   üìà √Ä am√©liorer :");
                    foreach (var point in eval.PointsAmeliorer)
                    {
                        Console.WriteLine($"      ‚Ä¢ {point}");
                    }
                }
            }
        }

        Console.WriteLine($"\n‚úÖ Correction sauvegard√©e avec l'ID : {correction.Id}");
    }
}
