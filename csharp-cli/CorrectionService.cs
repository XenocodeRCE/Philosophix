using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

public class CorrectionService
{
    private readonly OpenAiService _openAiService;
    private readonly JsonDatabaseService _dbService;

    private readonly string S√©v√©rit√© = "Degr√© de s√©v√©rit√© : 3 / 5"; // Degr√© de s√©v√©rit√© par d√©faut
    public CorrectionService(OpenAiService openAiService, JsonDatabaseService dbService)
    {
        _openAiService = openAiService;
        _dbService = dbService;
    }    /// <summary>
    /// Lance le processus complet de correction d'une copie
    /// </summary>
    public async Task<Correction> CorrigerCopieAsync(Devoir devoir, string copie, bool aPAP = false)
    {        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("ü§ñ CORRECTION EN COURS...");
        Console.WriteLine(new string('‚ïê', 60));

        var competences = devoir.Bareme?.Competences ?? new List<Competence>();
          // Filtrer les comp√©tences si PAP (exclure la comp√©tence "Ma√Ætrise de la langue fran√ßaise" ou "Expression et r√©daction")
        if (aPAP)
        {
            Console.WriteLine("‚ÑπÔ∏è  PAP activ√© : Les comp√©tences d'expression ne seront pas √©valu√©es.");
            if (devoir.Type?.ToLower() == "explication")
            {
                // retirer la comp√©tence 6, Nom = "Expression et r√©daction"
                competences = competences.Where(c => c.Nom != "Expression et r√©daction").ToList();
            }
            else
            {
                // retirer la comp√©tence 5, Nom = "Ma√Ætrise de la langue fran√ßaise"
                competences = competences.Where(c => c.Nom != "Ma√Ætrise de la langue fran√ßaise").ToList();
            }
        }
        
        var evaluations = new List<EvaluationCompetence>();

        // √âvaluation par comp√©tence
        for (int i = 0; i < competences.Count; i++)
        {
            var competence = competences[i];
            Console.WriteLine($"\nüìã √âvaluation de la comp√©tence {i + 1}/{competences.Count}:");
            Console.WriteLine($"   {competence.Nom}");
            Console.Write("   Analyse en cours");

            var evaluation = await EvaluerCompetenceAsync(competence, copie, devoir.Enonce ?? "", devoir.Type ?? "dissertation", devoir.TypeBac ?? "g√©n√©ral", aPAP);
            evaluations.Add(evaluation);

            Console.WriteLine($" ‚úÖ Note: {evaluation.Note:F1}/20");
        }        // √âvaluation finale
        Console.WriteLine("\nüéØ G√©n√©ration de l'√©valuation finale...");
        var evaluationFinale = await EvaluerFinalAsync(evaluations, competences, copie, devoir.Type ?? "dissertation", devoir.TypeBac ?? "g√©n√©ral", aPAP);

        // Calcul de la note moyenne
        var notesAjustees = evaluations.Select(e => AjusterNoteSelonNiveau(Convert.ToDouble(e.Note), devoir.TypeBac ?? "g√©n√©ral")).ToList();
        
        decimal noteMoyenne = (decimal)notesAjustees.Average();

        // Afficher l'ajustement si applicable
        if (devoir.TypeBac == "technologique")
        {
            var noteSansAjustement = evaluations.Average(e => e.Note);
            Console.WriteLine($"üìä Note avant ajustement bac techno : {noteSansAjustement:F1}/20");
            Console.WriteLine($"üìä Note apr√®s ajustement bac techno : {noteMoyenne:F1}/20 (+{noteMoyenne - noteSansAjustement:F1})");
        }

        // Cr√©ation de la correction
        var corrections = await _dbService.LireCorrectionsAsync();
        var newId = corrections.Count > 0 ? corrections.Max(c => c.Id) + 1 : 1;

        var correction = new Correction
        {
            Id = newId,
            DevoirId = devoir.Id,
            Note = noteMoyenne,
            Appreciation = evaluationFinale.Appreciation,
            PointsForts = evaluationFinale.PointsForts,
            PointsAmeliorer = evaluationFinale.PointsAmeliorer,
            Competences = evaluations,
            Copie = copie,
            DateCorrection = DateTime.Now
        };

        corrections.Add(correction);
        await _dbService.SauvegarderCorrectionsAsync(corrections);

        return correction;
    }    /// <summary>
    /// √âvalue une comp√©tence sp√©cifique
    /// </summary>
    private async Task<EvaluationCompetence> EvaluerCompetenceAsync(Competence competence, string copie, string enonce, string typeDevoir, string TypeBac, bool aPAP = false)    {
        var system = "Vous √™tes un professeur de philosophie exp√©riment√© qui corrige des r√©dactions.";
        
        var messagePAP = aPAP ? "\n\nIMPORTANT : Cet √©l√®ve dispose d'un PAP (Plan d'Accompagnement Personnalis√©). Ne tenez pas compte de la qualit√© de l'orthographe, de la grammaire ou de l'expression √©crite dans votre √©valuation. Concentrez-vous uniquement sur le contenu philosophique et la r√©flexion." : "";
        
        // Adapter le message selon le type de bac
        string messageNiveau = "";
        if (TypeBac == "technologique")
        {
            messageNiveau = "\nüìä NIVEAU : Bac technologique - Adaptez vos attentes au niveau et soyez bienveillant sur les imperfections mineures de forme. Privil√©giez la compr√©hension et les id√©es.";
        }

var prompt = $@"√âvaluez la comp√©tence ""{competence.Nom}"" .

**COMP√âTENCE √Ä √âVALUER :** 
{competence.Nom}

**CRIT√àRES D'√âVALUATION :**
{string.Join("\n", competence.Criteres ?? new List<string>())}

**√âNONC√â DU DEVOIR :** 
{enonce}

**STYLE D'APPR√âCIATION :**
Formel, vouvoie l'apprenant.

**TYPE DE DEVOIR:**
{typeDevoir}{messagePAP}

**COPIE DE L'√âL√àVE :**
{copie}
{messagePAP}{messageNiveau}

R√©pondez UNIQUEMENT au format JSON suivant :
{{
    ""note"": <note sur 20>,
    ""analyse"": ""<analyse d√©taill√©e qui cite des √©l√©ments de la copie>"",
    ""points_forts"": [""point fort 1"", ""point fort 2"", ...],
    ""points_ameliorer"": [""point √† am√©liorer 1"", ""point √† am√©liorer 2"", ...]
}}

√âvaluez UNIQUEMENT cette comp√©tence, rien d'autre.
Pour l'analyse, cites des √©l√©ments de la copie pour justifier ta note, et addresses-toi √† l'√©l√®ve directement.

{S√©v√©rit√©}";

        var response = await _openAiService.AskGptAsync(system, prompt);
        var evaluation = _openAiService.ParseEvaluationResponse(response);
        
        // Ajouter le nom de la comp√©tence √† l'√©valuation
        evaluation.Nom = competence.Nom;
        
        return evaluation;
    }    /// <summary>
    /// G√©n√®re l'√©valuation finale globale
    /// </summary>
    private async Task<EvaluationFinaleApiResponse> EvaluerFinalAsync(List<EvaluationCompetence> evaluations, List<Competence> competences, string copie, string typeDevoir, string TypeBac, bool aPAP = false)    {
        var system = "Vous √™tes un professeur de philosophie exp√©riment√© qui corrige des r√©dactions.";
        
        var echelleNotation = GetEchelleNotation(typeDevoir);
        var messagePAP = aPAP ? "\n\nIMPORTANT : Cet √©l√®ve dispose d'un PAP (Plan d'Accompagnement Personnalis√©). Dans votre appr√©ciation g√©n√©rale, ne tenez pas compte de la qualit√© de l'orthographe, de la grammaire ou de l'expression √©crite. Concentrez-vous uniquement sur le contenu philosophique et la r√©flexion." : "";

        string messageNiveau = "";
        if (TypeBac == "technologique")
        {
            messageNiveau = "\nüìä NIVEAU : Bac technologique - Adaptez vos attentes au niveau et soyez bienveillant sur les imperfections mineures de forme. Privil√©giez la compr√©hension et les id√©es.";
        }

        
        var evaluationsText = string.Join("\n", evaluations.Zip(competences, (eval, comp) => 
            $"{comp.Nom}: {eval.Note}/20 - {eval.Analyse}"));

        var prompt = $@"Type de devoir : {typeDevoir}
En tant que professeur de philosophie, faites une √©valuation globale de cette copie.

Voici les √©valuations par comp√©tence :
{evaluationsText}

Copie de l'√©l√®ve :
{copie}

Style d'appr√©ciation : 
Formelle, vouvoie l'apprenant.

{messagePAP}

{messageNiveau}

{echelleNotation}

R√©pondez UNIQUEMENT au format JSON suivant :
{{
    ""appreciation"": ""<appr√©ciation g√©n√©rale d√©taill√©e>"",
    ""points_forts"": [""point fort 1"", ""point fort 2"", ""point fort 3""],
    ""points_ameliorer"": [""point 1"", ""point 2"", ""point 3""]
}}

Pour l'appreciation addresses-toi √† l'√©l√®ve directement.
{S√©v√©rit√©}";

        var response = await _openAiService.AskGptAsync(system, prompt);
        return _openAiService.ParseEvaluationFinaleResponse(response);
    }

    /// <summary>
    /// Retourne l'√©chelle de notation selon le type de devoir
    /// </summary>
    private static string GetEchelleNotation(string typeDevoir)
    {
        if (typeDevoir?.ToLower() == "dissertation")
        {
            return @"√âchelle d'√©valuation pour guider la notation des copies :
""""""
- Ce qui est valoris√© : une probl√©matisation du sujet, une argumentation coh√©rente et progressive, l'analyse de concepts (notions, distinctions) et d'exemples pr√©cis√©ment √©tudi√©s, la mobilisation d'√©l√©ments de culture philosophique au service du traitement du sujet, la capacit√© de la r√©flexion √† entrer en dialogue avec elle-m√™me. 
- Ce qui est sanctionn√© : la paraphrase du texte, la r√©citation de cours sans lien avec le sujet, l'accumulation de lieux communs, la juxtaposition d'exemples sans r√©flexion, l'absence de probl√©matisation, l'absence de rigueur dans le raisonnement, l'absence de culture philosophique mobilis√©e pour traiter le sujet.

# √âchelle de notation :
- Entre 0 et 5 ‚Üí copie tr√®s insuffisante : inintelligible ; non structur√©e ; excessivement br√®ve ; marquant un refus manifeste de faire l'exercice.
- De 06 √† 09 ‚Üí Copie intelligible mais qui ne r√©pond pas aux crit√®res attest√©s de l'√©preuve : propos excessivement g√©n√©ral ou restant sans rapport avec la question pos√©e ; juxtaposition d'exemples sommaires ou anecdotiques ; accumulation de lieux communs ; paraphrase ou r√©p√©tition du texte ; r√©citation de cours sans traitement du sujet ;- copie qui aurait pu √™tre r√©dig√©e au d√©but de l'ann√©e, sans aucun cours de philosophie ou connaissances acquises.
- Pas moins de 10 ‚Üí Copie t√©moignant d'un r√©el effort de r√©flexion, et, m√™me si le r√©sultat n'est pas abouti, de traitement du sujet : effort de probl√©matisation ; effort de d√©finition des notions ; examen de r√©ponses possibles ; coh√©rence globale du propos.
- Pas moins de 12 ‚Üí Si, en plus, il y a mobilisation de r√©f√©rences et d'exemples pertinents pour le sujet.
- Pas moins de 14 ‚Üí Si, en plus, le raisonnement est construit, progressif, et que les affirmations pos√©es sont rigoureusement justifi√©es.
- Pas moins de 16 ‚Üí Si, en plus, la copie t√©moigne de la ma√Ætrise de concepts philosophiques utiles pour le sujet (notions, rep√®res), d'une d√©marche de recherche et du souci des enjeux de la question, d'une pr√©cision dans l'utilisation d'une culture au service du traitement du sujet. 
""""""";
        }
        else
        {
            return @"√âchelle d'√©valuation pour guider la notation des copies :
""""""
- Ce qui est valoris√© : une d√©termination du probl√®me du texte, une explication de ses √©l√©ments signifiants, une explicitation des articulations du texte, une caract√©risation  de la position philosophique √©labor√©e par  l'auteur dans le texte, et, plus g√©n√©ralement,  du questionnement auquel elle s'articule.
- Ce qui est sanctionn√© : la paraphrase du texte, la r√©citation de cours sans lien avec le texte de l'auteur, l'accumulation de lieux communs, la juxtaposition d'exemples sans r√©flexion, l'absence de probl√©matisation du texte, l'absence de rigueur dans le raisonnement, l'absence de culture philosophique mobilis√©e pour traiter le sujet.

# √âchelle de notation :
- Entre 0 et 5 ‚Üí copie tr√®s insuffisante : inintelligible ; non structur√©e ; excessivement br√®ve ; marquant un refus manifeste de faire l'exercice.
- De 06 √† 09 ‚Üí Copie intelligible mais qui ne r√©pond pas aux crit√®res attest√©s de l'√©preuve : propos excessivement g√©n√©ral ou restant sans rapport avec la question pos√©e ; juxtaposition d'exemples sommaires ou anecdotiques ; accumulation de lieux communs ; paraphrase ou r√©p√©tition du texte ; r√©citation de cours sans traitement du sujet ;- copie qui aurait pu √™tre r√©dig√©e au d√©but de l'ann√©e, sans aucun cours de philosophie ou connaissances acquises.
- Pas moins de 10 ‚Üí Copie faisant l'effort de r√©aliser l'exercice, m√™me si l'explication demeure maladroite et inaboutie : explication commen√ßante ; pas de contresens majeur sur le propos et la d√©marche de l'auteur.
- Pas moins de 12 ‚Üí Si, en plus, le texte est interrog√© avec un effort d'attention au d√©tail du propos, ainsi qu'√† sa structure logique.
- Pas moins de 14 ‚Üí Si, en plus, les √©l√©ments du texte sont mis en perspective, avec des √©l√©ments de connaissance permettant de d√©terminer et d'examiner le probl√®me.
- Pas moins de 16 ‚Üí Si, en plus, l'explication est d√©velopp√©e avec amplitude et justesse : l'ensemble du texte est examin√© et bien situ√© dans une probl√©matique  et un questionnement pertinents.
""""""";
        }
    }


    /// <summary>
    /// Ajuste les notes selon le niveau d'√©valuation pour plus de bienveillance
    /// </summary>
    private double AjusterNoteSelonNiveau(double note, string typeBac)
    {
        return typeBac switch
        {
            "technologique" => Math.Min(20, note + 1.5), // Bonus de bienveillance pour bac techno
            "g√©n√©ral" => note, // Pas d'ajustement pour le bac g√©n√©ral
            _ => note // Par d√©faut, pas d'ajustement
        };
    }

    /// <summary>
    /// Valide qu'une copie respecte les crit√®res minimums
    /// </summary>
    public static bool ValiderCopie(string copie, int longueurMinimum = 500)
    {
        return !string.IsNullOrWhiteSpace(copie) && copie.Length >= longueurMinimum;
    }

    /// <summary>
    /// Affiche les r√©sultats de correction de mani√®re format√©e
    /// </summary>
    public static void AfficherResultatsCorrection(Correction correction, List<Competence> competences)
    {
        //Console.Clear();
        Console.WriteLine("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        Console.WriteLine("‚ïë                R√âSULTATS DE CORRECTION               ‚ïë");
        Console.WriteLine("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        
        Console.WriteLine($"\nüéØ NOTE FINALE : {correction.Note:F1}/20");
        Console.WriteLine($"üìÖ Date de correction : {correction.DateCorrection:dd/MM/yyyy HH:mm}");
        
        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("üí¨ APPR√âCIATION G√âN√âRALE");
        Console.WriteLine(new string('‚ïê', 60));
        Console.WriteLine(correction.Appreciation);

        Console.WriteLine("\n" + new string('‚îÄ', 60));
        Console.WriteLine("‚úÖ POINTS FORTS");
        Console.WriteLine(new string('‚îÄ', 60));
        if (correction.PointsForts != null)
        {
            foreach (var point in correction.PointsForts)
            {
                Console.WriteLine($"‚Ä¢ {point}");
            }
        }

        Console.WriteLine("\n" + new string('‚îÄ', 60));
        Console.WriteLine("üìà POINTS √Ä AM√âLIORER");
        Console.WriteLine(new string('‚îÄ', 60));
        if (correction.PointsAmeliorer != null)
        {
            foreach (var point in correction.PointsAmeliorer)
            {
                Console.WriteLine($"‚Ä¢ {point}");
            }
        }

        Console.WriteLine("\n" + new string('‚ïê', 60));
        Console.WriteLine("üìä D√âTAIL PAR COMP√âTENCE");
        Console.WriteLine(new string('‚ïê', 60));
        
        if (correction.Competences != null)
        {
            for (int i = 0; i < correction.Competences.Count; i++)
            {
                var eval = correction.Competences[i];
                Console.WriteLine($"\n{i + 1}. {eval.Nom} - {eval.Note:F1}/20");
                Console.WriteLine($"   {eval.Analyse}");
                
                if (eval.PointsForts?.Count > 0)
                {
                    Console.WriteLine("   ‚úÖ Points forts :");
                    foreach (var point in eval.PointsForts)
                    {
                        Console.WriteLine($"      ‚Ä¢ {point}");
                    }
                }
                
                if (eval.PointsAmeliorer?.Count > 0)
                {
                    Console.WriteLine("   üìà √Ä am√©liorer :");
                    foreach (var point in eval.PointsAmeliorer)
                    {
                        Console.WriteLine($"      ‚Ä¢ {point}");
                    }
                }
            }
        }

        Console.WriteLine($"\n‚úÖ Correction sauvegard√©e avec l'ID : {correction.Id}");
    }
}
